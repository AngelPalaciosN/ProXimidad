# ============================================
# OPTIMIZACI√ìN DE IM√ÅGENES - ProXimidad
# ============================================

Write-Host "üñºÔ∏è ANALIZANDO IM√ÅGENES PESADAS..." -ForegroundColor Cyan
Write-Host ""

# Analizar carpeta media
$mediaPath = ".\backend\media\usuarios"
if (Test-Path $mediaPath) {
    Write-Host "üìÇ Analizando: $mediaPath" -ForegroundColor Yellow
    
    $archivos = Get-ChildItem -Path $mediaPath -Recurse -File
    $totalSize = ($archivos | Measure-Object -Property Length -Sum).Sum / 1MB
    
    Write-Host "   üìä Total de archivos: $($archivos.Count)" -ForegroundColor White
    Write-Host "   üì¶ Tama√±o total: $([math]::Round($totalSize, 2)) MB" -ForegroundColor White
    Write-Host ""
    
    # Listar archivos m√°s pesados
    Write-Host "üîç Archivos m√°s pesados (Top 10):" -ForegroundColor Yellow
    $archivos | Sort-Object Length -Descending | Select-Object -First 10 | ForEach-Object {
        $sizeMB = [math]::Round($_.Length / 1MB, 2)
        $sizeKB = [math]::Round($_.Length / 1KB, 0)
        
        if ($sizeMB -gt 1) {
            Write-Host "   üî¥ $($_.Name): ${sizeMB} MB" -ForegroundColor Red
        } elseif ($sizeKB -gt 500) {
            Write-Host "   üü° $($_.Name): ${sizeKB} KB" -ForegroundColor Yellow
        } else {
            Write-Host "   üü¢ $($_.Name): ${sizeKB} KB" -ForegroundColor Green
        }
    }
} else {
    Write-Host "‚ö†Ô∏è No se encontr√≥ la carpeta media" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "üí° RECOMENDACIONES:" -ForegroundColor Magenta
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "1. Archivos > 1MB:" -ForegroundColor Yellow
Write-Host "   ‚Üí Comprimir con herramientas online" -ForegroundColor White
Write-Host "   ‚Üí TinyPNG, Squoosh, ImageOptim" -ForegroundColor Gray
Write-Host ""
Write-Host "2. Formato WebP:" -ForegroundColor Yellow
Write-Host "   ‚Üí Convierte JPG/PNG a WebP (70% menos peso)" -ForegroundColor White
Write-Host ""
Write-Host "3. Lazy Loading:" -ForegroundColor Yellow
Write-Host "   ‚Üí Ya est√° implementado en el c√≥digo" -ForegroundColor White
Write-Host ""
Write-Host "4. CDN (Producci√≥n):" -ForegroundColor Yellow
Write-Host "   ‚Üí Cloudinary, ImgIX, AWS S3" -ForegroundColor White
Write-Host ""

# Analizar node_modules (informativo)
Write-Host "üì¶ An√°lisis de node_modules:" -ForegroundColor Yellow
$nodeModulesPath = ".\frontend\node_modules"
if (Test-Path $nodeModulesPath) {
    $nodeSize = (Get-ChildItem -Path $nodeModulesPath -Recurse -ErrorAction SilentlyContinue | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Host "   üìä Tama√±o: $([math]::Round($nodeSize, 2)) MB (normal, no afecta carga)" -ForegroundColor Gray
    Write-Host "   ‚ÑπÔ∏è node_modules NO se env√≠a al navegador" -ForegroundColor Gray
} else {
    Write-Host "   ‚ö†Ô∏è No encontrado. Ejecuta: npm install" -ForegroundColor Yellow
}

Write-Host ""
pause
