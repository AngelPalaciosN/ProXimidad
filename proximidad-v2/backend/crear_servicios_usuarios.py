#!/usr/bin/env python
"""
Script para crear servicios para usuarios proveedores existentes
"""

import os
import sys
import django
from decimal import Decimal
import random

# Configurar Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from proximidad_app.models import Usuario, Servicios, Categoria

def crear_categorias_si_no_existen():
    """Crear categor√≠as b√°sicas si no existen"""
    categorias = [
        {
            'nombre_categoria': 'Tecnolog√≠a',
            'descripcion_categoria': 'Servicios relacionados con tecnolog√≠a e inform√°tica',
            'icono': 'fas fa-laptop-code',
            'color': '#007bff'
        },
        {
            'nombre_categoria': 'Educaci√≥n',
            'descripcion_categoria': 'Servicios educativos y de formaci√≥n',
            'icono': 'fas fa-graduation-cap',
            'color': '#28a745'
        },
        {
            'nombre_categoria': 'Consultor√≠a',
            'descripcion_categoria': 'Servicios de consultor√≠a y asesor√≠a',
            'icono': 'fas fa-user-tie',
            'color': '#6f42c1'
        },
        {
            'nombre_categoria': 'Dise√±o',
            'descripcion_categoria': 'Servicios de dise√±o gr√°fico y creativo',
            'icono': 'fas fa-palette',
            'color': '#e83e8c'
        },
        {
            'nombre_categoria': 'Salud',
            'descripcion_categoria': 'Servicios relacionados con salud y bienestar',
            'icono': 'fas fa-heartbeat',
            'color': '#dc3545'
        },
        {
            'nombre_categoria': 'Hogar',
            'descripcion_categoria': 'Servicios para el hogar y mantenimiento',
            'icono': 'fas fa-home',
            'color': '#fd7e14'
        }
    ]
    
    for cat_data in categorias:
        categoria, created = Categoria.objects.get_or_create(
            nombre_categoria=cat_data['nombre_categoria'],
            defaults=cat_data
        )
        if created:
            print(f"‚úÖ Categor√≠a creada: {categoria.nombre_categoria}")
        else:
            print(f"‚ÑπÔ∏è  Categor√≠a ya existe: {categoria.nombre_categoria}")

def crear_servicios_para_proveedores():
    """Crear servicios variados para cada proveedor"""
    
    # Obtener todos los usuarios proveedores
    proveedores = Usuario.objects.filter(tipo_usuario='proveedor', activo=True)
    print(f"üìã Encontrados {proveedores.count()} proveedores activos")
    
    if not proveedores.exists():
        print("‚ùå No se encontraron proveedores en la base de datos")
        return
    
    # Obtener categor√≠as
    categorias = list(Categoria.objects.filter(activo=True))
    if not categorias:
        print("‚ùå No se encontraron categor√≠as. Creando categor√≠as primero...")
        crear_categorias_si_no_existen()
        categorias = list(Categoria.objects.filter(activo=True))
    
    # Plantillas de servicios por categor√≠a
    servicios_plantillas = {
        'Tecnolog√≠a': [
            {
                'nombre': 'Desarrollo Web Profesional',
                'descripcion': 'Desarrollo de sitios web modernos y responsivos con las √∫ltimas tecnolog√≠as. Incluye dise√±o, desarrollo, testing y despliegue.'
            },
            {
                'nombre': 'Aplicaciones M√≥viles',
                'descripcion': 'Desarrollo de aplicaciones m√≥viles nativas e h√≠bridas para Android e iOS con funcionalidades avanzadas.'
            },
            {
                'nombre': 'Consultor√≠a en Sistemas',
                'descripcion': 'Asesor√≠a especializada en arquitectura de sistemas, optimizaci√≥n de procesos y transformaci√≥n digital.'
            }
        ],
        'Educaci√≥n': [
            {
                'nombre': 'Clases Particulares de Programaci√≥n',
                'descripcion': 'Tutor√≠a personalizada en programaci√≥n, desde conceptos b√°sicos hasta tecnolog√≠as avanzadas.'
            },
            {
                'nombre': 'Cursos de Ingl√©s',
                'descripcion': 'Clases de ingl√©s personalizadas para todos los niveles, enfoque conversacional y t√©cnico.'
            },
            {
                'nombre': 'Matem√°ticas y F√≠sica',
                'descripcion': 'Clases particulares de matem√°ticas y f√≠sica para estudiantes de secundaria y universidad.'
            }
        ],
        'Consultor√≠a': [
            {
                'nombre': 'Consultor√≠a Empresarial',
                'descripcion': 'Asesor√≠a en gesti√≥n empresarial, procesos organizacionales y estrategias de crecimiento.'
            },
            {
                'nombre': 'Marketing Digital',
                'descripcion': 'Estrategias de marketing digital, gesti√≥n de redes sociales y campa√±as publicitarias.'
            }
        ],
        'Dise√±o': [
            {
                'nombre': 'Dise√±o Gr√°fico',
                'descripcion': 'Dise√±o de logos, identidad corporativa, material publicitario y dise√±o web.'
            },
            {
                'nombre': 'Dise√±o UX/UI',
                'descripcion': 'Dise√±o de interfaces de usuario y experiencia de usuario para aplicaciones web y m√≥viles.'
            }
        ],
        'Salud': [
            {
                'nombre': 'Terapia Psicol√≥gica',
                'descripcion': 'Sesiones de terapia psicol√≥gica individual, manejo de ansiedad, estr√©s y desarrollo personal.'
            },
            {
                'nombre': 'Nutrici√≥n y Diet√©tica',
                'descripcion': 'Planes nutricionales personalizados, seguimiento diet√©tico y educaci√≥n alimentaria.'
            }
        ],
        'Hogar': [
            {
                'nombre': 'Reparaciones Dom√©sticas',
                'descripcion': 'Servicios de reparaci√≥n y mantenimiento del hogar: plomer√≠a, electricidad, pintura.'
            },
            {
                'nombre': 'Limpieza Profunda',
                'descripcion': 'Servicios de limpieza profunda y mantenimiento para hogares y oficinas.'
            }
        ]
    }
    
    servicios_creados = 0
    
    for proveedor in proveedores:
        print(f"\nüë§ Creando servicios para: {proveedor.nombre_completo}")
        
        # Crear entre 2-4 servicios por proveedor
        num_servicios = random.randint(2, 4)
        
        for i in range(num_servicios):
            # Seleccionar categor√≠a aleatoria
            categoria = random.choice(categorias)
            
            # Obtener plantillas de esa categor√≠a
            plantillas = servicios_plantillas.get(categoria.nombre_categoria, [
                {'nombre': 'Servicio Profesional', 'descripcion': 'Servicio profesional especializado'}
            ])
            
            if plantillas:
                plantilla = random.choice(plantillas)
                
                # Generar precio aleatorio entre 50,000 y 2,000,000
                precio = Decimal(random.randint(50000, 2000000))
                
                # Verificar si ya existe un servicio similar
                existe = Servicios.objects.filter(
                    proveedor=proveedor,
                    nombre_servicio__icontains=plantilla['nombre'][:20]
                ).exists()
                
                if not existe:  # Solo crear si no existe
                    servicio = Servicios.objects.create(
                        nombre_servicio=f"{plantilla['nombre']} - {proveedor.nombre_completo.split()[0]}",
                        descripcion=plantilla['descripcion'],
                        precio_base=precio,
                        categoria=categoria,
                        proveedor=proveedor,
                        activo=True,
                        destacado=random.choice([True, False]),
                        views=random.randint(1, 100)
                    )
                    
                    print(f"  ‚úÖ Servicio creado: {servicio.nombre_servicio} - ${precio:,.0f}")
                    servicios_creados += 1
                else:
                    print(f"  ‚ö†Ô∏è  Servicio similar ya existe para {plantilla['nombre']}")
    
    print(f"\nüéâ ¬°Proceso completado! Se crearon {servicios_creados} servicios nuevos")
    
    # Mostrar resumen
    print("\nüìä RESUMEN FINAL:")
    total_servicios = Servicios.objects.count()
    total_proveedores = Usuario.objects.filter(tipo_usuario='proveedor').count()
    print(f"üë• Total proveedores: {total_proveedores}")
    print(f"üõçÔ∏è  Total servicios: {total_servicios}")
    print(f"üìÇ Total categor√≠as: {Categoria.objects.count()}")

if __name__ == "__main__":
    print("üöÄ Iniciando creaci√≥n de servicios para proveedores...")
    crear_categorias_si_no_existen()
    crear_servicios_para_proveedores()
    print("‚úÖ ¬°Script completado!")